/*
 * DiveHub.WebApi | v1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DiveHub.ClientApi.Client.OpenAPIDateConverter;

namespace DiveHub.ClientApi.Model
{
    /// <summary>
    /// DiveSaveDto
    /// </summary>
    [DataContract(Name = "DiveSaveDto")]
    public partial class DiveSaveDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiveSaveDto" /> class.
        /// </summary>
        /// <param name="diveId">diveId.</param>
        /// <param name="diveName">diveName.</param>
        /// <param name="diveDate">diveDate.</param>
        /// <param name="description">description.</param>
        /// <param name="points">points.</param>
        /// <param name="photos">photos.</param>
        public DiveSaveDto(int diveId = default(int), string diveName = default(string), DateTime diveDate = default(DateTime), string description = default(string), List<DiveSavePointDto> points = default(List<DiveSavePointDto>), List<DiveSavePhotoDto> photos = default(List<DiveSavePhotoDto>))
        {
            this.diveId = diveId;
            this.diveName = diveName;
            this.diveDate = diveDate;
            this.description = description;
            this.points = points;
            this.photos = photos;
        }

        /// <summary>
        /// Gets or Sets diveId
        /// </summary>
        [DataMember(Name = "diveId", EmitDefaultValue = false)]
        public int diveId { get; set; }

        /// <summary>
        /// Gets or Sets diveName
        /// </summary>
        [DataMember(Name = "diveName", EmitDefaultValue = false)]
        public string diveName { get; set; }

        /// <summary>
        /// Gets or Sets diveDate
        /// </summary>
        [DataMember(Name = "diveDate", EmitDefaultValue = false)]
        public DateTime diveDate { get; set; }

        /// <summary>
        /// Gets or Sets description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string description { get; set; }

        /// <summary>
        /// Gets or Sets points
        /// </summary>
        [DataMember(Name = "points", EmitDefaultValue = false)]
        public List<DiveSavePointDto> points { get; set; }

        /// <summary>
        /// Gets or Sets photos
        /// </summary>
        [DataMember(Name = "photos", EmitDefaultValue = false)]
        public List<DiveSavePhotoDto> photos { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DiveSaveDto {\n");
            sb.Append("  diveId: ").Append(diveId).Append("\n");
            sb.Append("  diveName: ").Append(diveName).Append("\n");
            sb.Append("  diveDate: ").Append(diveDate).Append("\n");
            sb.Append("  description: ").Append(description).Append("\n");
            sb.Append("  points: ").Append(points).Append("\n");
            sb.Append("  photos: ").Append(photos).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
