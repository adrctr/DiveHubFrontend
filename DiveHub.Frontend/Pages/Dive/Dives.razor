@page "/dives"
@using DiveHub.ClientApi.Api
@using DiveHub.ClientApi.Model

@inject ISnackbar Snackbar
@inject IDialogService DialogService
<MudStack>
    <MudPaper Elevation="4" Class="d-flex pa-4 ma-4">
        <MudText Typo="Typo.h6">Dive List</MudText>
    </MudPaper>
        <MudDataGrid T="DiveDetailDto" Items="@dives" EditMode="DataGridEditMode.Form" Dense="true" Bordered="true">
            <Columns>
                <PropertyColumn Property="x => x.diveName" Title="Dive Name"/>
                <PropertyColumn Property="x => x.diveDate" Title="Dive Date"/>
                <PropertyColumn Property="x => x.description" Title="Description"/>
                <TemplateColumn CellClass="d-flex justify-end">
                    <CellTemplate>
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit"
                                       OnClick="@context.Actions.StartEditingItemAsync"/>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
</MudStack>
<MudSnackbarProvider/>

@code {
    [Inject] IDiveApiAsync diveApiAsync { get; set; }

    private List<DiveDetailDto> dives = [];

    protected override async Task OnInitializedAsync()
    {
        try
        {
            dives = await diveApiAsync.ApiDiveAllGetAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to fetch dives: {ex.Message}");
        }
    }

    private void EditDive(int diveId)
    {
        Console.WriteLine($"Edit Dive {diveId}"); // Replace with navigation to an edit page or modal
    }

    void StartedEditingItem(DiveDto item)
    {
        // _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }


    private async Task DeleteDive(int diveId)
    {
        var confirmed = await DialogService.ShowMessageBox(
            "Confirm Delete",
            "Are you sure you want to delete this dive?",
            "Yes",
            "No");

        if (confirmed == true)
        {
            try
            {
                await diveApiAsync.ApiDiveIdDeleteAsync(diveId);
                dives = (await diveApiAsync.ApiDiveAllGetAsync()).ToList(); // Refresh the list
                Snackbar.Add("Dive deleted successfully!", Severity.Success);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to delete dive: {ex.Message}");
            }
        }
    }

}