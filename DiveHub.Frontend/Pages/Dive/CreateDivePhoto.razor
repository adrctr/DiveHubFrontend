@page "/dive/{diveId:int}/photos"
@using System.Net.Http.Headers
@using DiveHub.ClientApi.Api
@inject ISnackbar Snackbar


<PageTitle>Upload Files</PageTitle>






@* @if (fileNames.Count > 0) 
{
    <ul>
        @foreach (var fileName in fileNames)
        {
            <li>
                File: @fileName
                <br>
                <span>
                    Stored File Name: @GetStoredFileName(fileName)
                </span>
                <button @onclick="@(() => DownloadFile(GetStoredFileName(fileName), fileName))">Download file</button>
            </li>
        }
    </ul>
}
*@
<MudFileUpload T="IReadOnlyList<IBrowserFile>" FilesChanged="UploadFiles">
    <ActivatorContent>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.CloudUpload">
            Multiple Files
        </MudButton>
    </ActivatorContent>
</MudFileUpload>

@code {
    private int maxAllowedFiles = int.MaxValue;
    private long maxFileSize = long.MaxValue;
    private List<string> fileNames = new();

    [Inject] private HttpClient Http { get; set; } = default!;

    [Parameter] public int DiveId { get; set; }

    private async Task UploadFiles(IReadOnlyList<IBrowserFile> files)
    {
        using var content = new MultipartFormDataContent();
        content.Add(new StringContent(DiveId.ToString()), "DiveId");

        foreach (var file in files)
        {
            var stream = file.OpenReadStream(maxFileSize);
            var fileContent = new StreamContent(stream);
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

            fileNames.Add(file.Name);

            content.Add(fileContent, "files", file.Name);
        }

        var response = await Http.PostAsync("http://localhost:5109/api/DivePhoto", content);
    }
    // private string? GetStoredFileName(string fileName)
    // {
    //     var uploadResult = uploadResults.SingleOrDefault(f => f.FileName == fileName);
    //     if (uploadResult is not null)
    //         return uploadResult.StoredFileName;
    //
    //     return "File not found.";
    // }

    private async Task DownloadFile(string storedFileName, string originalFileName)
    {
        var response = await Http.GetAsync($"/api/File/{storedFileName}");

        if(!response.IsSuccessStatusCode)
        {
            Snackbar.Add("File not found.");
        }
        else
        {
            var fileStream = response.Content.ReadAsStream();
            using var streamRef = new DotNetStreamReference(stream: fileStream);
            Snackbar.Add($"downloadFileFromStream {originalFileName} {streamRef}");
        }
    }
}