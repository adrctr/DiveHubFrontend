@page "/dive/{diveId:int}/photos"
@using System.Net.Http.Headers
@using DiveHub.ClientApi.Api
@using Microsoft.AspNetCore.Http
@inject ISnackbar Snackbar

  <PageTitle>Upload Files</PageTitle>

<h1>Upload Files!</h1>

<InputFile OnChange="@OnInputFileChange" multiple />

@* @if (fileNames.Count > 0) 
{
    <ul>
        @foreach (var fileName in fileNames)
        {
            <li>
                File: @fileName
                <br>
                <span>
                    Stored File Name: @GetStoredFileName(fileName)
                </span>
                <button @onclick="@(() => DownloadFile(GetStoredFileName(fileName), fileName))">Download file</button>
            </li>
        }
    </ul>
}
*@
@code {
    private int maxAllowedFiles = int.MaxValue;
    private long maxFileSize = long.MaxValue;
    private List<string> fileNames = new();
    
    [Inject] private HttpClient Http { get; set; } = default!;
    
    [Parameter] public int DiveId { get; set; }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        using var content = new MultipartFormDataContent();
        
        content.Add(new StringContent(DiveId.ToString()), "DiveId");

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

            fileNames.Add(file.Name);

            content.Add(
                content: fileContent,
                name: "\"files\"",
                fileName: file.Name);
        }

        var response = await Http.PostAsync("http://localhost:5109/api/DivePhoto", content);

    }

    // private string? GetStoredFileName(string fileName)
    // {
    //     var uploadResult = uploadResults.SingleOrDefault(f => f.FileName == fileName);
    //     if (uploadResult is not null)
    //         return uploadResult.StoredFileName;
    //
    //     return "File not found.";
    // }

    private async Task DownloadFile(string storedFileName, string originalFileName)
    {
        var response = await Http.GetAsync($"/api/File/{storedFileName}");

        if(!response.IsSuccessStatusCode)
        {
            Snackbar.Add("File not found.");
        }
        else
        {
            var fileStream = response.Content.ReadAsStream();
            using var streamRef = new DotNetStreamReference(stream: fileStream);
            Snackbar.Add($"downloadFileFromStream {originalFileName} {streamRef}");
        }
    }
}