@page "/dive/create"
@using DiveHub.ClientApi.Api
@inject ISnackbar Snackbar
@using DiveHub.ClientApi.Model

<MudText Typo="Typo.h6">Créer une nouvelle plongée</MudText>
<MudPaper Elevation="4" Class="pa-4 ma-6">
    <MudForm @bind-IsValid="@IsValid" Spacing="3" @ref="form" Model="diveSaveDto">
        <MudTextField @bind-Value="@diveSaveDto.diveName" Label="Dive Name" Required="true"
                      RequiredError="Dive name is required!"/>
        <MudDatePicker @bind-Date="@diveSaveDto.diveDate" Label="Dive Date" Required="true"
                       RequiredError="Dive date is required!"/>
        <MudTextField @bind-Value="@diveSaveDto.description" Lines="3" Label="Description"/>
    </MudForm>
</MudPaper>

<MudText Typo="Typo.h6">Ajouter une photo à la plongée</MudText>


<MudButton Class="mt-2" Disabled="@(!IsValid)" Variant="Variant.Filled" Color="Color.Primary" OnClick="@OnAddDive">
    Créer la plongée
</MudButton>
<MudSnackbarProvider/>

@code {
    [Inject] IDiveApiAsync diveApiAsync { get; set; }
    [Inject] NavigationManager Navigation { get; set; }

    bool IsValid;
    private DiveSaveDto diveSaveDto = new();
    private MudForm? form;

    private async Task OnAddDive()
    {
        try
        {
            DiveDto diveCreated = await diveApiAsync.ApiDivePostAsync(diveSaveDto, 1); // Remplacez avec l'ID utilisateur approprié
            Snackbar.Add("Dive created successfully!", Severity.Success);
            Navigation.NavigateTo($"/dive/{diveCreated.diveId}/photos");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to create dive: {ex.Message}", Severity.Error);
        }
    }

    protected override void OnInitialized()
    {
        diveSaveDto.diveDate = DateTime.Today;
    }
}