@page "/dive/create"
@using DiveHub.ClientApi.Api
@inject ISnackbar Snackbar
@using DiveHub.ClientApi.Model

<MudPaper Elevation="4" Class="pa-4 ma-6">
    <MudText Typo="Typo.h6">Créer une nouvelle plongée</MudText>

    <MudForm @bind-IsValid="@IsValid" Spacing="3" @ref="form" Model="diveDto">
        <MudTextField @bind-Value="@diveDto.diveName" Label="Dive Name" Required="true" RequiredError="Dive name is required!"/>
        <MudDatePicker @bind-Date="@diveDto.diveDate" Label="Dive Date" Required="true" RequiredError="Dive date is required!"/>
        <MudTextField @bind-Value="@diveDto.description" Lines="3" Label="Description" />
    </MudForm>
    <MudButton Class="ma-2" Disabled="@(!IsValid)" Variant="Variant.Filled" Color="Color.Primary" OnClick="@OnAddDive">
        Enregistrer
    </MudButton>
</MudPaper>

<MudSnackbarProvider />

@code {
    [Inject] IDiveApiAsync diveApiAsync { get; set; } 

    bool IsValid;
    private DiveSaveDto diveDto = new();
    private MudForm? form;
    private bool isValid;
    
    private async Task OnAddDive()
    {
        await form!.Validate();
        //if (!isValid) return;

        try
        {
            await diveApiAsync.ApiDivePostAsync(diveDto,1); // Remplacez avec l'ID utilisateur approprié
            Snackbar.Add("Dive created successfully!", Severity.Success);
            diveDto = new DiveSaveDto()
            {
                diveDate =  DateTime.Today
            }; // Reset form
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to create dive: {ex.Message}", Severity.Error);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        diveDto.diveDate = DateTime.Today;
    }
}