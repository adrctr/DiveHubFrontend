@page "/dive/create"
@using DiveHub.ClientApi.Api
@inject ISnackbar Snackbar
@using DiveHub.ClientApi.Model

<MudPaper Elevation="4" Class="pa-4">
    <MudText Typo="Typo.h6">Create a New Dive</MudText>

    <MudForm @ref="form" Model="diveDto">
        <MudTextField @bind-Value="diveDto.diveName" Label="Dive Name" Required="true" />
        <MudDatePicker @bind-Date="diveDateTemp" Label="Dive Date" Required="true" />
        <MudTextField @bind-Value="diveDto.description" Label="Description" />

        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@OnAddDive" >
            Submit
        </MudButton>
    </MudForm>
</MudPaper>

<MudSnackbarProvider />

@code {
    [Inject] IDiveApiAsync diveApiAsync { get; set; } 

    private DiveDto diveDto = new();
    private MudForm? form;
    private bool isValid;
    
    // Temporary nullable DateTime for binding
    private DateTime? diveDateTemp
    {
        get => diveDto.diveDate; // Convert DiveDate to DateTime?
        set => diveDto.diveDate = value ?? DateTime.Today; // Ensure DiveDate remains non-nullable
    }

    private async Task OnAddDive()
    {
        await form!.Validate();
        //if (!isValid) return;

        try
        {
            await diveApiAsync.ApiDivePostAsync(diveDto,1); // Remplacez avec l'ID utilisateur approprié
            Snackbar.Add("Dive created successfully!", Severity.Success);
            diveDto = new DiveDto(); // Reset form
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to create dive: {ex.Message}", Severity.Error);
        }
    }
}